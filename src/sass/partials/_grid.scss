 /* 
      Как работают элементы div?
      div - элементы уровня блока. Они не будут терпеть никаких элементов ни с левой или с правой стороне и, таким образом, будут занимать всю ширину. Однако высота элементов div вычисляется из его потомков. div будет занимать столько высоты, сколько требуется для отображения содержимого.
      */
 .grid-container div {
     color: #fff;
     font-size: 2em;
     display: flex;
     justify-content: center;
     align-items: center;
 }

 .grid-container div:nth-child(1n) {
     background-color: #C1DBB3;
 }

 .grid-container div:nth-child(3n) {
     background-color: #7798AB;
 }

 .grid-container div:nth-child(2n) {
     background-color: #FF8966;
 }

 .grid-container {
     // display:inline-grid;
     display: grid;

     // grid-template-columns: 1fr 1fr 1fr; 
     // grid-template-rows:1fr 1fr;

     /* 
        :: grid-template-columns:repeat(3,1fr) :: 
        repeat(no of columns, width of a column)
        1fr takes the entire available width
        :: grid-template-rows:repeat(2,1fr) :: 
        repeat(no of rows, height of a row)
        1fr takes the entire available width
     */

     //  grid-template-columns: repeat(3, 1fr);
     //  grid-template-rows: repeat(2, 1fr);

     /* 
        :: grid-gap:5px ::
        Gap between each grid element    
     */

     grid-gap: 5px;

     /*
        Shorthand for defining rows and columns
        grid-template: repeat(2,1fr) / repeat(3,1fr)
        Remember drawing an L: First rows & then columns
     */

     // grid-template: repeat(2,1fr) / repeat(3,1fr);

     grid-template: repeat(2, 1fr) / repeat(3, minmax(240px, 1fr));

 }

 .cards {
     list-style: none;
     margin: 0;
     padding: 0;

     & li {
         border: 2px solid #490A3D;
         border-radius: 5px;
         background-color: #BD1550;
         color: #fff;
         flex: 1 1 240px;
     }

     & h2 {
         background-color: #490A3D;
         margin: 0;
         padding: 10px;
     }

     & p {
         padding: 10px;
     }

     & img {
         padding: 10px;
         max-width: 100%;
     }

 }


 .container {
     height: 100%;
     display: grid;
     grid-template-columns: repeat(12, 1fr);
     grid-template-rows: 60px minmax(40px, 1fr) 140px;
     grid-gap: 5px;
     /*
        grid-template-areas:
        "h h h h h h h h h h h h"
        "m m c c c c c c c c c c"
        "f f f f f f f f f f f f"
        Naming your layout based on the available columns & rows. Similar letters should form a rectangle to work. Use '.' for blank cells.
    */
     grid-template-areas:
         "h h h h h h h h h h h h"
         "m m c c c c c c c c c c"
         "f f f f f f f f f f f f"
 }

 .container div {
    color: #fff;
    font-size: 2em;
    display: flex;
    justify-content: center;
    align-items: center;
}

.container div:nth-child(1n) {
    background-color: #C1DBB3;
}

.container div:nth-child(3n) {
    background-color: #7798AB;
}

.container div:nth-child(2n) {
    background-color: #FF8966;
}

.container div:nth-child(4n) {
    background-color: #ffcc5c;
}
// 
//  .header {
//      grid-area: h;
//  }

//  .aside {
//      grid-area: m;
//  }

//  .content {
//      grid-area: c;
//  }

//  .footer {
//      grid-area: f;
//  }
// ------------------------------------------------------------------
 /*  1) Way 1
        grid-column-start:1;
        grid-column-end: 3;
        This means that grid column should start at column line 1 and should finish at column line 3. We have two columns in this example,
        and thus, three column lines.
    2) Way 2
        Shorthand method of above syntax: start / end
        grid-column: 1  / 3;
    3) Way 3
        grid-column: 1 / span 2;
        Start at column 1 and span across two columns
    4) Way 4
        :: grid-column: 1 / -1 :: Start at column 1 & span till last column line
    */
    
    // .header{
    //     grid-column: -11 / -1;    
    // }
    // .aside{
    //     grid-column: 1 / span 2;

    //     // grid-column-start:1; 
    //     // grid-column-end: 3;

    //     // grid-column: 1  / 3;
    //     // grid-column: 1 / span 2;

    //     grid-row: 1 / -1;
    // }
    // .content{
    //     grid-column: -11 / -1;
    // }
    // .footer{
    //     grid-column: -11 / -1;
    // }


    .header{
        grid-column: 1 / 11;
    }
    .aside{
        grid-column: 11 / span 2;
        grid-row: 1 / -1;
    }
    .content{
        grid-column: 1 / 11;
    }
    .footer{
        grid-column: 1 / 11;
    }

// --------------------------------------------------------------------
 

.fit-container{
    display:grid;
    grid-gap: 5px;
    grid-template-columns: repeat(auto-fit,minmax(150px, 1fr));
    grid-auto-rows: 75px;
    grid-auto-flow: dense;    
}

.fit-container > div > img{
    object-fit: cover;
    width: 100%;
    height: 100%;
}
/* 
    grid-auto-flow: row ::  It means containers will be placed one by one & one row at a time. 
    grid-auto-flow: dense ::  Attempts to fill up the holes.
    Source order independence which means grid can reorder the layout regardless of how it is written in markup.
*/
.horizontal{
    /* 
        For horizontal images, apply grid-column property.
        grid-column: 1 / span 2 :: This would always start with column 1 irrespective of available space in previous row.
        Instead, use grid-column: auto / span 2; || grid-column: span 2;
    */
    grid-column: span 2;
}
.vertical{
    grid-row: span 3;
}
.square{
    grid-column: span 3;
    grid-row: span 3;
}


.auto-fit-container {
    border: 1px solid black;
    display: grid;
    grid-gap: 5px;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    grid-template-rows: 100px 100px;

}

.auto-fill-container{
    border: 1px solid black;
    display: grid;
    grid-gap: 5px;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    grid-template-rows: 100px 100px;
}

.auto-fit-container > div, .container2 > div{
    color:#fff;
    font-size: 2em;
    display: flex;
    justify-content: center;
    align-items: center;
}

.auto-fit-container > div > img, .auto-fill-container > div > img{
    object-fit: cover;
    width: 100%;
    height: 100%;
}
.auto-fit-container > div:nth-child(1n),
.auto-fill-container > div:nth-child(1n){
    background-color: #C1DBB3;
}
.auto-fit-container > div:nth-child(3n),
.auto-fill-container > div:nth-child(3n){
    background-color: #7798AB;
}
.auto-fit-container > div:nth-child(2n),
.auto-fill-container > div:nth-child(2n){
    background-color: #FF8966;
}
.auto-fit-container > div:nth-child(4n),
.auto-fill-container > div:nth-child(4n){
    background-color: #ffcc5c;
}

h1.title {
    margin: 4rem 0;
    font-size: 4rem;
    text-align: center;
}


.justify-container {
    border: 1px solid black;
    height: 100%;
    display: grid;
    grid-gap: 5px;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(2, 100px);
    justify-content: space-evenly;
    align-content:center;

    & > div:nth-child(1n){
        background-color: #C1DBB3;
    }
    & > div:nth-child(3n){
        background-color: #7798AB;
    }
    & > div:nth-child(2n){
        background-color: #FF8966;
    }
    & > div:nth-child(4n){
        background-color: #ffcc5c;
    }
}
/* 
    justify-content: center;
    Justifies the content horizontally (start, center, end etc..)
    space-between: Puts space between the elements.
    space-evenly: Distributes space equally among the items.
    space-aroud: First & last space would be of half of the size compare to the in-between spaces.
    align-content:center;
    Aligns the content vertically.
*/


.subscribe-container {
    height: 100vh;
    max-width: 1000px;
    padding: 1rem;
  }
  
  .subscribe-form {
    background: #323a45;
    padding: 2rem;
  }
  
  /* fallback styles */
  .grid {
    display: flex;
    flex-flow: row wrap;
  }
  
  .grid--gutter-small {
    margin-left: -1rem;
  }
  .grid__item {
    flex: 1 0 auto;
    padding-left: 1rem;
    padding-bottom: 1rem;
    width: 200px;
  }
  
  /* end fallback styles */
  @supports (display: grid) {
    .grid {
      display: grid;
    }
  
    /* resets */
    .grid__item {
      padding: initial;
      width: auto;
    }
  
    .grid--gutter-small {
      margin: initial;
    }
  }
  .grid--gutter-small {
    grid-gap: 1rem;
  }
  
  .grid--auto-sizing {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
  
  .heading {
    color: #fff;
    font-size: 1.5rem;
    font-weight: 700;
    letter-spacing: 0.1rem;
    margin-bottom: 1rem;
    text-align: center;
    text-transform: uppercase;
  }
  
  .input {
    border: none;
    border-radius: 3px;
    display: block;
    font-size: 0.9rem;
    font-weight: 300;
    padding: 1rem;
    width: 100%;
  }
  
  label {
    color: #fff;
    margin-bottom: 0.5rem;
    font-weight: 300;
    font-size: 0.8rem;
  }
  
  .button {
    background: none;
    background-color: #ff3366;
    border: none;
    border-radius: 3px;
    color: #fff;
    cursor: pointer;
    font-size: 0.9rem;
    margin-top: auto;
    padding: 1rem;
    text-transform: uppercase;
    width: 100%;
}


.media {
    border: 2px solid #f76707;
    border-radius: 5px;
    background-color: #fff4e6;
    max-width: 400px;
}
.media {
    display: grid;
    grid-template-columns: 1fr 3fr;
    grid-template-areas: "img content";
    margin-bottom: 1em;
}

.media .image {
    grid-area: img;
    background-color: #ffd8a8;
}

.media .text {
    grid-area: content;
    padding: 10px;
    
}


.media.flipped {
    grid-template-columns: 3fr 1fr;
    grid-template-areas: "content img";
}

.wrapper {
    margin: 0 auto;
    width: 90%;
    height: auto;
    border: 2px solid #CCC;
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(3,1fr);
    justify-content: center;
    align-content: end;
}

.box {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
    }

    .item1 {
    grid-column: 1 / 5;
    background-color: #00a;
    }

    .item2 {
    grid-column: 1 / 3;
    grid-row: 2 / 4;
    background-color: #a00;
    }

    .item3 {
    grid-column: 3 / 5;
    background-color: #0a0;
    }



    .wrapper-box {
        display: grid;
        grid-gap: 10px;
        width: 90%;
        margin: 0 auto;
        grid-template-columns: repeat(4, [col] 180px ) ;
        grid-template-rows: repeat(2, [row] auto  );
        background-color: #fff;
        color: #444;
	}

	.in-box {
		background-color: #444;
		color: #fff;
		border-radius: 5px;
		padding: 20px;
		font-size: 150%;

	}

	.in-box .box {
		background-color: #ccc;
		color: #444;
	}

	.a {
		grid-column: col / span 2;
		grid-row: row;
	}

	.b {
		grid-column: col 3 / span 2;
		grid-row: row;
	}

	.c {
		grid-column: col / span 2;
		grid-row: row 2;
	}

	.d{
		grid-column: col 3 / span 2;
		grid-row: row 2;
		display: grid;
    	grid-gap: 10px;
		grid-template-columns: 1fr 1fr;
	}

	.e {
		grid-column: 1 / 3;
		grid-row: 1;
	}

	.f {
		grid-column: 1;
		grid-row: 2;
	}

	.g {
		grid-column: 2;
		grid-row: 2;
    }


        
.grid-layout {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    grid-gap: 10px;
    grid-auto-rows: minmax(120px, auto);
    grid-auto-flow: dense;
    padding: 10px;
  }
  
  .grid-item {
    padding: 1rem;
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    color: #929796;
    background-color: #333;
    border-radius: 5px;
  }
  .grid-item:nth-child(odd) {
    background-color: #424242;
  }
  
  .span-2 {
    grid-column-end: span 2;
    grid-row-end: span 2;
  }
  
  .span-3 {
    grid-column-end: span 3;
    grid-row-end: span 4;
  }
         